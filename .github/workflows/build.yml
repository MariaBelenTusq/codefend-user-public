name: 'publish'
on:
  push:
    branches:
      - build


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache
            ~/.local/share
            ./target 
          key: ${{ runner.os }}-node-rust-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Rust dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
            target

          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install pnpm
        run: |
          npm install -g pnpm

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build and publish with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false

      - name: Upload MAC file
        if: matrix.platform == 'macos-latest'
        run: |
          echo "${{ secrets.PEM_KEY }}" > key.pem; chmod 600 key.pem;
          mv /Users/runner/work/codefend-user/codefend-user/src-tauri/target/release/bundle/macos/codefend.app.tar.gz /Users/runner/work/codefend-user/codefend-user/src-tauri/target/release/bundle/macos/codefend-mac.AppImage.tar.gz      
          scp -i key.pem -o StrictHostKeyChecking=no -r /Users/runner/work/codefend-user/codefend-user/src-tauri/target/release/bundle/macos/codefend-mac.AppImage.tar.gz ubuntu@54.157.111.21:/var/www/html/codefend-user/releases

      - name: Upload WINDOWS file
        if: matrix.platform == 'windows-latest'
        run: |
          echo "${{ secrets.PEM_KEY }}" > key.pem; chmod 600 key.pem;
          icacls.exe key.pem /inheritance:r;
          icacls.exe key.pem /grant:r "${env:USERNAME}:(R)";
          ren "D:\a\codefend-user\codefend-user\src-tauri\target\release\bundle\nsis\codefend_0.9.0_x64-setup.nsis.zip" "codefend-windows.nsis.zip"
          scp -i key.pem -o StrictHostKeyChecking=no -r D:\a\codefend-user\codefend-user\src-tauri\target\release\bundle\nsis\codefend-windows.nsis.zip ubuntu@54.157.111.21:/var/www/html/codefend-user/releases
    
      - name: Upload LINUX file
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "${{ secrets.PEM_KEY }}" > key.pem; chmod 600 key.pem;
          mv /home/runner/work/codefend-user/codefend-user/src-tauri/target/release/bundle/appimage/codefend_0.9.0_amd64.AppImage.tar.gz /home/runner/work/codefend-user/codefend-user/src-tauri/target/release/bundle/appimage/codefend-linux.AppImage.tar.gz
          scp -i key.pem -o StrictHostKeyChecking=no -r /home/runner/work/codefend-user/codefend-user/src-tauri/target/release/bundle/appimage/codefend-linux.AppImage.tar.gz ubuntu@54.157.111.21:/var/www/html/codefend-user/releases
          
      - name: Connect to BUILD_SERVER and execute pull and build commands
        if: matrix.platform == 'windows-latest'
        run: |
          $key = "${{ secrets.PEM_KEY }}"
          $tempPath = "temp_key.pem"
          Set-Content -Path $tempPath -Value $key
          chmod 600 $tempPath
          icacls.exe $tempPath /inheritance:r
          icacls.exe $tempPath /grant:r "${env:USERNAME}:(R)"
          ssh -i $tempPath ubuntu@54.157.111.21 -o StrictHostKeyChecking=no "
            sudo su - &&
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash &&
            export NVM_DIR=/home/ubuntu/.nvm &&
            [ -s /home/ubuntu/.nvm/nvm.sh ] && \. /home/ubuntu/.nvm/nvm.sh &&
            nvm install 21 &&
            nvm use 21 &&
            cd /var/www/html/codefend-user &&
            git pull origin build &&
            npm install &&
            npm run build"