//Core packages
import { createSignal } from "solid-js";
import { FaSolidGlobe } from "solid-icons/fa";
import createModal from "../../../Store/modal.jsx";
import toast from "solid-toast";
import ButtonLoader from "../../ButtonLoader/buttonLoader.jsx";
import { IssuesServices } from "../../../Services/ApiHandlerV2/issues.handler.js";
import createUser from "../../../Store/user.jsx";

function MobileAppModal(props) {
  const { showModal, setShowModal } = createModal;
  const [issueName, setVulnerabilityName] = createSignal("");
  const [score, setScore] = createSignal("");
  const [issueType, setVulnerabilityType] = createSignal("");
  const [isAddingIssue, setIsAddingIssue] = createSignal(false);

  const { user } = createUser;

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsAddingIssue(true);

    if (!score() || score() < 0 || score() > 5) {
      toast.error("Invalid score");
      return setIsAddingIssue(false);
    }

    if (!issueName() || issueName().length == 0 || issueName().length > 100) {
      toast.error("Invalid name");
      return setIsAddingIssue(false);
    }

    if (
      ![
        "web",
        "mobile",
        "cloud",
        "lan",
        "source",
        "social",
        "research",
      ].includes(issueType())
    ) {
      toast.error("Invalid issue type");
      return setIsAddingIssue(false);
    }

    const requestParams = {
      risk_score: score(),
      name: issueName(),
      resource_class: issueType(),
      // researcher_username: user().username,
      // main_desc: "",
    };

    console.log({ requestParams });

    IssuesServices.add(requestParams)
      .then(() => {
        props.onDone();
        setShowModal(!showModal());
        toast.success("Successfully Added Issue...");
      })
      .finally(() => {
        return setIsAddingIssue(false);
      });
  };

  return (
    <>
      <div class="container flex items-center justify-center  mx-auto p-3 text-format">
        <form onSubmit={handleSubmit} class="p-6">
          <div class="relative flex items-center w-96">
            <span class="absolute">
              <FaSolidGlobe class="w-3 h-3 mx-4 codefend-text-red" />
            </span>

            <input
              type="text"
              onChange={(e) => {
                setVulnerabilityName(e.target.value);
              }}
              class="block w-full py-3 bg-white border px-11 log-inputs focus:outline-none dark:text-gray-300"
              placeholder="issue title"
              required
            />
          </div>
          <div class="relative flex items-center w-96 mt-4">
            <span class="absolute">
              <FaSolidGlobe class="w-3 h-3 mx-4 codefend-text-red" />
            </span>

            <select
              onChange={(e) => {
                setScore(e.target.value);
              }}
              class="block w-full py-3 bg-white border px-11 log-inputs focus:outline-none dark:text-gray-300"
              required
            >
              <option value="" disabled selected>
                score
              </option>
              <option value="5">critical</option>
              <option value="4">elevated</option>
              <option value="3">medium</option>
              <option value="2">low</option>
              <option value="1">intel</option>
            </select>
          </div>
          <div class="relative flex items-center w-96 mt-4">
            <span class="absolute">
              <FaSolidGlobe class="w-3 h-3 mx-4 codefend-text-red" />
            </span>

            <select
              onChange={(e) => {
                setVulnerabilityType(e.target.value);
              }}
              class="block w-full py-3 bg-white border px-11 log-inputs focus:outline-none dark:text-gray-300"
              required
            >
              <option value="" disabled selected>
                class
              </option>
              <option value="web">web</option>
              <option value="mobile">mobile</option>
              <option value="cloud">cloud</option>
              <option value="lan">internal network</option>
              <option value="source">source code</option>
              <option value="social">social & osint</option>
              <option value="research">research</option>
            </select>
          </div>
          <div class="mt-6 flex">
            <button
              type="button"
              disabled={isAddingIssue()}
              onClick={() => {
                setShowModal(!showModal());
              }}
              class="log-inputs text-gray focus:outline-none w-2/6 px-4 mr-2 py-3 text-sm tracking-wide text-white transition-colors duration-300 codefend_secondary_ac"
            >
              cancel
            </button>
            <button
              type="submit"
              disabled={isAddingIssue()}
              class="log-inputs flex flex-row items-center gap-x-2 text-white focus:outline-none bg-codefend px-6 w-4/6 py-3 text-sm tracking-wide text-white transition-colors duration-300 codefend_main_ac"
            >
              {isAddingIssue() && <ButtonLoader />}
              add issue
            </button>
          </div>
        </form>
      </div>
    </>
  );
}

export default MobileAppModal;
